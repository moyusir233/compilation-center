// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: api/compilationCenter/v1/build.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuildClient is the client API for Build service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuildClient interface {
	// 获得数据收集服务和数据处理服务的可执行程序
	GetServiceProgram(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (Build_GetServiceProgramClient, error)
}

type buildClient struct {
	cc grpc.ClientConnInterface
}

func NewBuildClient(cc grpc.ClientConnInterface) BuildClient {
	return &buildClient{cc}
}

func (c *buildClient) GetServiceProgram(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (Build_GetServiceProgramClient, error) {
	stream, err := c.cc.NewStream(ctx, &Build_ServiceDesc.Streams[0], "/api.serviceCentre.v1.Build/GetServiceProgram", opts...)
	if err != nil {
		return nil, err
	}
	x := &buildGetServiceProgramClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Build_GetServiceProgramClient interface {
	Recv() (*BuildReply, error)
	grpc.ClientStream
}

type buildGetServiceProgramClient struct {
	grpc.ClientStream
}

func (x *buildGetServiceProgramClient) Recv() (*BuildReply, error) {
	m := new(BuildReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BuildServer is the server API for Build service.
// All implementations must embed UnimplementedBuildServer
// for forward compatibility
type BuildServer interface {
	// 获得数据收集服务和数据处理服务的可执行程序
	GetServiceProgram(*BuildRequest, Build_GetServiceProgramServer) error
	mustEmbedUnimplementedBuildServer()
}

// UnimplementedBuildServer must be embedded to have forward compatible implementations.
type UnimplementedBuildServer struct {
}

func (UnimplementedBuildServer) GetServiceProgram(*BuildRequest, Build_GetServiceProgramServer) error {
	return status.Errorf(codes.Unimplemented, "method GetServiceProgram not implemented")
}
func (UnimplementedBuildServer) mustEmbedUnimplementedBuildServer() {}

// UnsafeBuildServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuildServer will
// result in compilation errors.
type UnsafeBuildServer interface {
	mustEmbedUnimplementedBuildServer()
}

func RegisterBuildServer(s grpc.ServiceRegistrar, srv BuildServer) {
	s.RegisterService(&Build_ServiceDesc, srv)
}

func _Build_GetServiceProgram_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BuildServer).GetServiceProgram(m, &buildGetServiceProgramServer{stream})
}

type Build_GetServiceProgramServer interface {
	Send(*BuildReply) error
	grpc.ServerStream
}

type buildGetServiceProgramServer struct {
	grpc.ServerStream
}

func (x *buildGetServiceProgramServer) Send(m *BuildReply) error {
	return x.ServerStream.SendMsg(m)
}

// Build_ServiceDesc is the grpc.ServiceDesc for Build service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Build_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.serviceCentre.v1.Build",
	HandlerType: (*BuildServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetServiceProgram",
			Handler:       _Build_GetServiceProgram_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/compilationCenter/v1/build.proto",
}
